plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "br.com.viavarejo.desafio"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "MARVEL_API_KEY", getApiKey())
        buildConfigField("String", "MARVEL_PRIVATE_KEY", getPrivateApiKey())
    }

    buildTypes {
        debug {
            minifyEnabled false
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    dataBinding {
        enabled = true
    }
    buildFeatures {
        buildConfig = true
    }
}

def getApiKey() {
    def keysFile = file("keys.properties")
    def keysProperties = new Properties()
    keysProperties.load(new FileInputStream(keysFile))
    def tmdbApiKey = keysProperties['MARVEL_PUBLIC_KEY']
    return tmdbApiKey
}

def getPrivateApiKey() {
    def keysFile = file("keys.properties")
    def keysProperties = new Properties()
    keysProperties.load(new FileInputStream(keysFile))
    def tmdbApiKey = keysProperties['MARVEL_PRIVATE_KEY']
    return tmdbApiKey
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0'
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    // // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.databinding:databinding-common:7.1.1'
    // units
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    // Koin for Kotlin apps
    implementation "io.insert-koin:koin-core:$koin_version"
    // Koin main features for Android
    implementation "io.insert-koin:koin-android:$koin_version"
    // Testing
    androidTestImplementation "io.insert-koin:koin-test:$koin_version"
    androidTestImplementation "io.insert-koin:koin-test-junit4:$koin_version"
    // Java Compatibility
    implementation "io.insert-koin:koin-android-compat:$koin_version"
    // mockito
    androidTestImplementation "org.mockito:mockito-core:4.3.1"
    // espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    // mockk
    androidTestImplementation "io.mockk:mockk-android:1.12.2"
    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.9.0"
    // okhttp
    implementation "com.squareup.okhttp3:logging-interceptor:3.14.9"
    implementation "com.squareup.okhttp3:okhttp:3.14.9"
    // image
    implementation 'com.squareup.picasso:picasso:2.71828'
}